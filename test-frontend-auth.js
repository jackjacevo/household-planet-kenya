const puppeteer = require('puppeteer');

async function testFrontendAuth() {
  console.log('🚀 Starting Frontend Authentication Tests\n');
  
  const browser = await puppeteer.launch({ 
    headless: false, // Set to true for headless mode
    defaultViewport: null,
    args: ['--start-maximized']
  });
  
  const page = await browser.newPage();
  
  try {
    // Test 1: Navigate to homepage
    console.log('📍 Test 1: Navigate to homepage');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
    console.log('✅ Homepage loaded successfully');
    
    // Test 2: Check if auth buttons are visible
    console.log('\n📍 Test 2: Check auth buttons visibility');
    const loginButton = await page.$('a[href=\"/login\"]');\n    const signupButton = await page.$('a[href=\"/register\"]');\n    \n    if (loginButton && signupButton) {\n      console.log('✅ Login and Signup buttons are visible');\n    } else {\n      console.log('❌ Auth buttons not found');\n    }\n    \n    // Test 3: Navigate to register page\n    console.log('\\n📍 Test 3: Navigate to register page');\n    await page.click('a[href=\"/register\"]');\n    await page.waitForSelector('form', { timeout: 5000 });\n    console.log('✅ Register page loaded successfully');\n    \n    // Test 4: Fill registration form\n    console.log('\\n📍 Test 4: Fill registration form');\n    const timestamp = Date.now();\n    \n    await page.type('input[name=\"firstName\"]', 'Test');\n    await page.type('input[name=\"lastName\"]', 'User');\n    await page.type('input[name=\"email\"]', `test${timestamp}@example.com`);\n    await page.type('input[name=\"phone\"]', '+254700000000');\n    await page.type('input[name=\"password\"]', 'TestPassword123');\n    await page.type('input[name=\"confirmPassword\"]', 'TestPassword123');\n    \n    console.log('✅ Registration form filled successfully');\n    \n    // Test 5: Submit registration (this will likely fail if backend is not running)\n    console.log('\\n📍 Test 5: Submit registration form');\n    await page.click('button[type=\"submit\"]');\n    \n    // Wait for either success redirect or error message\n    try {\n      await page.waitForSelector('.text-red-700, .text-green-700', { timeout: 10000 });\n      \n      const errorMessage = await page.$('.text-red-700');\n      const successMessage = await page.$('.text-green-700');\n      \n      if (errorMessage) {\n        const errorText = await page.evaluate(el => el.textContent, errorMessage);\n        console.log('⚠️ Registration failed (expected if backend not running):', errorText);\n      } else if (successMessage) {\n        const successText = await page.evaluate(el => el.textContent, successMessage);\n        console.log('✅ Registration successful:', successText);\n      }\n    } catch (error) {\n      console.log('⚠️ No response from registration (backend might not be running)');\n    }\n    \n    // Test 6: Navigate to login page\n    console.log('\\n📍 Test 6: Navigate to login page');\n    await page.goto('http://localhost:3000/login', { waitUntil: 'networkidle2' });\n    await page.waitForSelector('form', { timeout: 5000 });\n    console.log('✅ Login page loaded successfully');\n    \n    // Test 7: Check login form elements\n    console.log('\\n📍 Test 7: Check login form elements');\n    const emailInput = await page.$('input[name=\"email\"]');\n    const passwordInput = await page.$('input[name=\"password\"]');\n    const submitButton = await page.$('button[type=\"submit\"]');\n    \n    if (emailInput && passwordInput && submitButton) {\n      console.log('✅ All login form elements are present');\n    } else {\n      console.log('❌ Some login form elements are missing');\n    }\n    \n    // Test 8: Test form validation\n    console.log('\\n📍 Test 8: Test form validation');\n    await page.click('button[type=\"submit\"]'); // Submit empty form\n    \n    try {\n      await page.waitForSelector('.text-red-600', { timeout: 3000 });\n      console.log('✅ Form validation is working (error messages shown)');\n    } catch (error) {\n      console.log('⚠️ Form validation might not be working properly');\n    }\n    \n    console.log('\\n🏁 Frontend tests completed!');\n    \n  } catch (error) {\n    console.error('❌ Test failed:', error.message);\n  } finally {\n    await browser.close();\n  }\n}\n\n// Check if puppeteer is available\ntry {\n  testFrontendAuth();\n} catch (error) {\n  console.log('❌ Puppeteer not available. Install with: npm install puppeteer');\n  console.log('Running basic checks instead...');\n  \n  // Basic checks without puppeteer\n  console.log('\\n📋 Manual Testing Checklist:');\n  console.log('1. ✅ Navigate to http://localhost:3000');\n  console.log('2. ✅ Check if Login and Sign Up buttons are visible in header');\n  console.log('3. ✅ Click Sign Up button and verify register page loads');\n  console.log('4. ✅ Fill registration form with valid data');\n  console.log('5. ✅ Submit form and check for success/error messages');\n  console.log('6. ✅ Navigate to login page');\n  console.log('7. ✅ Test login form validation');\n  console.log('8. ✅ Test successful login (if backend is running)');\n  console.log('9. ✅ Check if profile icon appears after login');\n  console.log('10. ✅ Test profile dropdown menu');\n}