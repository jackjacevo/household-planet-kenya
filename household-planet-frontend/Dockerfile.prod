# Multi-stage build for production frontend
FROM node:18-alpine AS deps

WORKDIR /app

# Copy package files
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Builder stage
FROM node:18-alpine AS builder

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

WORKDIR /app

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Create health check script
RUN echo 'const http = require("http");\n\
const options = {\n\
  host: "localhost",\n\
  port: 3000,\n\
  path: "/api/health",\n\
  timeout: 3000,\n\
};\n\
const request = http.request(options, (res) => {\n\
  console.log(`Health check status: ${res.statusCode}`);\n\
  process.exit(res.statusCode === 200 ? 0 : 1);\n\
});\n\
request.on("error", (err) => {\n\
  console.error("Health check failed:", err);\n\
  process.exit(1);\n\
});\n\
request.end();' > /app/healthcheck.js && chown nextjs:nodejs /app/healthcheck.js

USER nextjs

EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node healthcheck.js

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Use dumb-init to handle signals properly
CMD ["dumb-init", "node", "server.js"]