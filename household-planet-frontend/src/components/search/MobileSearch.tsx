'use client';

import { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { motion, AnimatePresence } from 'framer-motion';
import { Search, X, Clock, TrendingUp, ArrowRight } from 'lucide-react';
import { useDebounce } from '@/hooks/useDebounce';
import { api } from '@/lib/api';

interface MobileSearchProps {\n  isOpen: boolean;\n  onClose: () => void;\n  placeholder?: string;\n}\n\ninterface SearchResult {\n  id: string;\n  name: string;\n  category: string;\n  price: number;\n  image?: string;\n}\n\ninterface SearchSuggestion {\n  query: string;\n  type: 'recent' | 'trending' | 'category';\n}\n\nexport function MobileSearch({ isOpen, onClose, placeholder = 'Search products...' }: MobileSearchProps) {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<SearchResult[]>([]);\n  const [suggestions, setSuggestions] = useState<SearchSuggestion[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [recentSearches, setRecentSearches] = useState<string[]>([]);\n  const debouncedQuery = useDebounce(query, 300);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const router = useRouter();\n\n  // Load recent searches from localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem('recentSearches');\n    if (saved) {\n      setRecentSearches(JSON.parse(saved));\n    }\n    \n    // Load trending searches\n    setSuggestions([\n      { query: 'Kitchen utensils', type: 'trending' },\n      { query: 'Home decor', type: 'trending' },\n      { query: 'Cleaning supplies', type: 'trending' },\n      { query: 'Bathroom accessories', type: 'category' },\n      { query: 'Bedding', type: 'category' },\n    ]);\n  }, []);\n\n  // Focus input when opened\n  useEffect(() => {\n    if (isOpen && inputRef.current) {\n      setTimeout(() => {\n        inputRef.current?.focus();\n      }, 100);\n    }\n  }, [isOpen]);\n\n  // Search products\n  useEffect(() => {\n    if (debouncedQuery.length >= 2) {\n      searchProducts(debouncedQuery);\n    } else {\n      setResults([]);\n    }\n  }, [debouncedQuery]);\n\n  const searchProducts = async (searchQuery: string) => {\n    setLoading(true);\n    try {\n      const response = await api.searchProducts(searchQuery, { limit: 8 });\n      setResults(response.data || []);\n    } catch (error) {\n      console.error('Search error:', error);\n      setResults([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSearch = (searchQuery: string) => {\n    if (!searchQuery.trim()) return;\n    \n    // Save to recent searches\n    const updated = [searchQuery, ...recentSearches.filter(s => s !== searchQuery)].slice(0, 5);\n    setRecentSearches(updated);\n    localStorage.setItem('recentSearches', JSON.stringify(updated));\n    \n    // Navigate to search results\n    router.push(`/products?search=${encodeURIComponent(searchQuery)}`);\n    onClose();\n  };\n\n  const handleResultClick = (result: SearchResult) => {\n    router.push(`/products/${result.id}`);\n    onClose();\n  };\n\n  const handleSuggestionClick = (suggestion: SearchSuggestion) => {\n    setQuery(suggestion.query);\n    handleSearch(suggestion.query);\n  };\n\n  const clearRecentSearches = () => {\n    setRecentSearches([]);\n    localStorage.removeItem('recentSearches');\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (query.trim()) {\n      handleSearch(query);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        className=\"fixed inset-0 bg-white z-50 flex flex-col\"\n      >\n        {/* Header */}\n        <div className=\"bg-white border-b border-gray-200 p-4 safe-area-inset-top\">\n          <form onSubmit={handleSubmit} className=\"flex items-center space-x-3\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400\" />\n              <input\n                ref={inputRef}\n                type=\"text\"\n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n                placeholder={placeholder}\n                className=\"w-full pl-10 pr-4 py-4 text-base border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all duration-200\"\n                autoComplete=\"off\"\n              />\n              {query && (\n                <button\n                  type=\"button\"\n                  onClick={() => setQuery('')}\n                  className=\"absolute right-3 top-1/2 -translate-y-1/2 p-1 text-gray-400 hover:text-gray-600 min-h-touch min-w-touch\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </button>\n              )}\n            </div>\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"text-gray-600 hover:text-gray-800 px-3 py-2 min-h-touch\"\n            >\n              Cancel\n            </button>\n          </form>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-y-auto\">\n          {loading && (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"w-6 h-6 border-2 border-green-500 border-t-transparent rounded-full animate-spin\" />\n            </div>\n          )}\n\n          {/* Search Results */}\n          {results.length > 0 && (\n            <div className=\"p-4\">\n              <h3 className=\"text-sm font-medium text-gray-900 mb-3\">Products</h3>\n              <div className=\"space-y-3\">\n                {results.map((result) => (\n                  <button\n                    key={result.id}\n                    onClick={() => handleResultClick(result)}\n                    className=\"w-full flex items-center space-x-3 p-3 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors duration-200 text-left min-h-touch\"\n                  >\n                    {result.image && (\n                      <div className=\"w-12 h-12 bg-gray-200 rounded-lg overflow-hidden flex-shrink-0\">\n                        <img\n                          src={result.image}\n                          alt={result.name}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      </div>\n                    )}\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium text-gray-900 truncate\">{result.name}</p>\n                      <p className=\"text-sm text-gray-500\">{result.category}</p>\n                      <p className=\"text-sm font-semibold text-green-600\">KES {result.price.toLocaleString()}</p>\n                    </div>\n                    <ArrowRight className=\"h-4 w-4 text-gray-400 flex-shrink-0\" />\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* No Results */}\n          {query.length >= 2 && results.length === 0 && !loading && (\n            <div className=\"text-center py-8 px-4\">\n              <div className=\"w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center\">\n                <Search className=\"h-8 w-8 text-gray-400\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No results found</h3>\n              <p className=\"text-gray-600\">Try searching for something else</p>\n            </div>\n          )}\n\n          {/* Recent Searches */}\n          {query.length === 0 && recentSearches.length > 0 && (\n            <div className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <h3 className=\"text-sm font-medium text-gray-900\">Recent Searches</h3>\n                <button\n                  onClick={clearRecentSearches}\n                  className=\"text-sm text-green-600 hover:text-green-700 min-h-touch px-2\"\n                >\n                  Clear\n                </button>\n              </div>\n              <div className=\"space-y-2\">\n                {recentSearches.map((search, index) => (\n                  <button\n                    key={index}\n                    onClick={() => handleSearch(search)}\n                    className=\"w-full flex items-center space-x-3 p-3 hover:bg-gray-50 rounded-xl transition-colors duration-200 text-left min-h-touch\"\n                  >\n                    <Clock className=\"h-4 w-4 text-gray-400 flex-shrink-0\" />\n                    <span className=\"flex-1 text-gray-700\">{search}</span>\n                    <ArrowRight className=\"h-4 w-4 text-gray-400 flex-shrink-0\" />\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Suggestions */}\n          {query.length === 0 && (\n            <div className=\"p-4\">\n              <h3 className=\"text-sm font-medium text-gray-900 mb-3\">Trending Searches</h3>\n              <div className=\"space-y-2\">\n                {suggestions.map((suggestion, index) => (\n                  <button\n                    key={index}\n                    onClick={() => handleSuggestionClick(suggestion)}\n                    className=\"w-full flex items-center space-x-3 p-3 hover:bg-gray-50 rounded-xl transition-colors duration-200 text-left min-h-touch\"\n                  >\n                    <TrendingUp className=\"h-4 w-4 text-green-500 flex-shrink-0\" />\n                    <span className=\"flex-1 text-gray-700\">{suggestion.query}</span>\n                    <ArrowRight className=\"h-4 w-4 text-gray-400 flex-shrink-0\" />\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </motion.div>\n    </AnimatePresence>\n  );\n}