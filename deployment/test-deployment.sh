#!/bin/bash

# Comprehensive Deployment Test Script
# Tests all fixed configuration issues

set -e

echo "üß™ Testing Household Planet Kenya Deployment Configuration"
echo "========================================================="

# Test 1: Docker Configuration
echo ""
echo "1Ô∏è‚É£ Testing Docker Configuration..."

if [ ! -f "household-planet-backend/Dockerfile.prod" ]; then
    echo "‚ùå Missing backend Dockerfile.prod"
    exit 1
fi

if [ ! -f "household-planet-frontend/Dockerfile.prod" ]; then
    echo "‚ùå Missing frontend Dockerfile.prod"
    exit 1
fi

echo "‚úÖ Docker production files exist"

# Test 2: Environment Configuration
echo ""
echo "2Ô∏è‚É£ Testing Environment Configuration..."

if [ -f ".env" ]; then
    echo "‚ùå .env file still exists - should be removed"
    exit 1
fi

if ! grep -q ".env\*" .gitignore; then
    echo "‚ùå .gitignore missing .env* patterns"
    exit 1
fi

echo "‚úÖ Environment files properly secured"

# Test 3: Domain Consistency
echo ""
echo "3Ô∏è‚É£ Testing Domain Consistency..."

# Count incorrect domain references
INCORRECT_COUNT=$(find . -name "*.js" -o -name "*.ts" -o -name "*.tsx" | xargs grep -l "householdplanet\.co\.ke" | wc -l || echo "0")

if [ "$INCORRECT_COUNT" -gt "0" ]; then
    echo "‚ùå Found $INCORRECT_COUNT files with incorrect domain references"
    exit 1
fi

echo "‚úÖ All domain references use householdplanetkenya.co.ke"

# Test 4: Health Check Configuration
echo ""
echo "4Ô∏è‚É£ Testing Health Check Configuration..."

if ! grep -q "HEALTHCHECK" household-planet-backend/Dockerfile.prod; then
    echo "‚ùå Backend missing health check"
    exit 1
fi

if ! grep -q "HEALTHCHECK" household-planet-frontend/Dockerfile.prod; then
    echo "‚ùå Frontend missing health check"
    exit 1
fi

if [ ! -f "household-planet-frontend/src/app/api/health/route.ts" ]; then
    echo "‚ùå Frontend missing health endpoint"
    exit 1
fi

echo "‚úÖ Health checks configured"

# Test 5: Backup Configuration
echo ""
echo "5Ô∏è‚É£ Testing Backup Configuration..."

if [ ! -f "deployment/backup-system.sh" ]; then
    echo "‚ùå Missing backup system script"
    exit 1
fi

if ! grep -q "postgres_backups" dokploy.yml; then
    echo "‚ùå Missing backup volume in dokploy.yml"
    exit 1
fi

echo "‚úÖ Backup system configured"

# Test 6: Monitoring Configuration
echo ""
echo "6Ô∏è‚É£ Testing Monitoring Configuration..."

if [ ! -f "deployment/monitoring/docker-compose.monitoring.yml" ]; then
    echo "‚ùå Missing monitoring configuration"
    exit 1
fi

if [ ! -f "deployment/monitoring/setup-monitoring.sh" ]; then
    echo "‚ùå Missing monitoring setup script"
    exit 1
fi

echo "‚úÖ Monitoring stack configured"

# Test 7: Next.js Configuration
echo ""
echo "7Ô∏è‚É£ Testing Next.js Configuration..."

if ! grep -q "output.*standalone" household-planet-frontend/next.config.js; then
    echo "‚ùå Next.js missing standalone output"
    exit 1
fi

if ! grep -q "rewrites" household-planet-frontend/next.config.js; then
    echo "‚ùå Next.js missing API proxy configuration"
    exit 1
fi

echo "‚úÖ Next.js properly configured"

# Test 8: Security Configuration
echo ""
echo "8Ô∏è‚É£ Testing Security Configuration..."

if grep -r "your_secure_password_123" . --exclude-dir=.git; then
    echo "‚ùå Found placeholder passwords in code"
    exit 1
fi

# Check for other placeholder secrets (excluding this test script)
if grep -r "your-super-secret" . --exclude-dir=.git --exclude="$(basename "$0")"; then
    echo "‚ö†Ô∏è  Warning: Found placeholder secrets in templates (expected in .example files)"
fi

echo "‚úÖ Security configuration looks good"

# Summary
echo ""
echo "üéâ All Deployment Tests Passed!"
echo "================================"
echo ""
echo "‚úÖ Environment files secured"
echo "‚úÖ Docker configurations fixed"
echo "‚úÖ Domain references standardized"
echo "‚úÖ Health checks added"
echo "‚úÖ Backup strategy implemented"
echo "‚úÖ Monitoring stack configured"
echo "‚úÖ API proxy configured"
echo "‚úÖ Security improvements applied"
echo ""
echo "üöÄ Ready for production deployment!"
echo ""
echo "Next steps:"
echo "1. Configure secrets in Dokploy (not .env files)"
echo "2. Test in staging environment"
echo "3. Deploy to production"