import { PrismaService } from '../prisma/prisma.service';
export declare class StaffManagementService {
    private prisma;
    constructor(prisma: PrismaService);
    getStaffMembers(): Promise<{
        name: string;
        email: string;
        role: string;
        id: string;
        isActive: boolean;
        createdAt: Date;
        lastLoginAt: Date;
    }[]>;
    createStaffMember(data: any): Promise<{
        name: string;
        email: string;
        phone: string | null;
        password: string;
        role: string;
        dateOfBirth: Date | null;
        gender: string | null;
        id: string;
        avatar: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        firstName: string | null;
        lastName: string | null;
        emailVerified: boolean;
        phoneVerified: boolean;
        emailVerifyToken: string | null;
        phoneVerifyToken: string | null;
        resetPasswordToken: string | null;
        resetPasswordExpires: Date | null;
        refreshToken: string | null;
        lastLoginAt: Date | null;
        socialProviders: string | null;
        twoFactorEnabled: boolean;
        twoFactorSecret: string | null;
        loyaltyPoints: number;
        totalSpent: number;
        preferredLanguage: string;
        marketingEmails: boolean;
        smsNotifications: boolean;
    }>;
    updateStaffRole(userId: string, role: string): Promise<{
        name: string;
        email: string;
        phone: string | null;
        password: string;
        role: string;
        dateOfBirth: Date | null;
        gender: string | null;
        id: string;
        avatar: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        firstName: string | null;
        lastName: string | null;
        emailVerified: boolean;
        phoneVerified: boolean;
        emailVerifyToken: string | null;
        phoneVerifyToken: string | null;
        resetPasswordToken: string | null;
        resetPasswordExpires: Date | null;
        refreshToken: string | null;
        lastLoginAt: Date | null;
        socialProviders: string | null;
        twoFactorEnabled: boolean;
        twoFactorSecret: string | null;
        loyaltyPoints: number;
        totalSpent: number;
        preferredLanguage: string;
        marketingEmails: boolean;
        smsNotifications: boolean;
    }>;
    deactivateStaff(userId: string): Promise<{
        name: string;
        email: string;
        phone: string | null;
        password: string;
        role: string;
        dateOfBirth: Date | null;
        gender: string | null;
        id: string;
        avatar: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        firstName: string | null;
        lastName: string | null;
        emailVerified: boolean;
        phoneVerified: boolean;
        emailVerifyToken: string | null;
        phoneVerifyToken: string | null;
        resetPasswordToken: string | null;
        resetPasswordExpires: Date | null;
        refreshToken: string | null;
        lastLoginAt: Date | null;
        socialProviders: string | null;
        twoFactorEnabled: boolean;
        twoFactorSecret: string | null;
        loyaltyPoints: number;
        totalSpent: number;
        preferredLanguage: string;
        marketingEmails: boolean;
        smsNotifications: boolean;
    }>;
    getStaffPermissions(role: string): Promise<any>;
    logActivity(userId: string, action: string, details: any): Promise<number>;
    getActivityLog(filters?: any): Promise<unknown>;
    private generateId;
}
