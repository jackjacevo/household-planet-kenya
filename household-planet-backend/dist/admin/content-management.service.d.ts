import { PrismaService } from '../prisma/prisma.service';
export declare class ContentManagementService {
    private prisma;
    constructor(prisma: PrismaService);
    getHomepageContent(): Promise<{
        id: string;
        slug: string;
        isActive: boolean;
        seoTitle: string | null;
        seoDescription: string | null;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        content: string;
    }[]>;
    updateHomepageContent(data: any): Promise<{
        id: string;
        slug: string;
        isActive: boolean;
        seoTitle: string | null;
        seoDescription: string | null;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        content: string;
    }>;
    getPromotions(): Promise<{
        id: string;
        slug: string;
        seoTitle: string | null;
        seoDescription: string | null;
        tags: string | null;
        viewCount: number;
        createdAt: Date;
        updatedAt: Date;
        status: string;
        title: string;
        content: string;
        excerpt: string | null;
        featuredImage: string | null;
        publishedAt: Date | null;
        authorId: string | null;
    }[]>;
    createPromotion(data: any): Promise<{
        id: string;
        slug: string;
        seoTitle: string | null;
        seoDescription: string | null;
        tags: string | null;
        viewCount: number;
        createdAt: Date;
        updatedAt: Date;
        status: string;
        title: string;
        content: string;
        excerpt: string | null;
        featuredImage: string | null;
        publishedAt: Date | null;
        authorId: string | null;
    }>;
    updatePromotion(id: string, data: any): Promise<{
        id: string;
        slug: string;
        seoTitle: string | null;
        seoDescription: string | null;
        tags: string | null;
        viewCount: number;
        createdAt: Date;
        updatedAt: Date;
        status: string;
        title: string;
        content: string;
        excerpt: string | null;
        featuredImage: string | null;
        publishedAt: Date | null;
        authorId: string | null;
    }>;
    getEmailTemplates(): Promise<{
        id: string;
        slug: string;
        isActive: boolean;
        seoTitle: string | null;
        seoDescription: string | null;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        content: string;
    }[]>;
    createEmailTemplate(data: any): Promise<{
        id: string;
        slug: string;
        isActive: boolean;
        seoTitle: string | null;
        seoDescription: string | null;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        content: string;
    }>;
    updateEmailTemplate(id: string, data: any): Promise<{
        id: string;
        slug: string;
        isActive: boolean;
        seoTitle: string | null;
        seoDescription: string | null;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        content: string;
    }>;
    getStaticPages(): Promise<{
        id: string;
        slug: string;
        isActive: boolean;
        seoTitle: string | null;
        seoDescription: string | null;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        content: string;
    }[]>;
    createStaticPage(data: any): Promise<{
        id: string;
        slug: string;
        isActive: boolean;
        seoTitle: string | null;
        seoDescription: string | null;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        content: string;
    }>;
    updateStaticPage(id: string, data: any): Promise<{
        id: string;
        slug: string;
        isActive: boolean;
        seoTitle: string | null;
        seoDescription: string | null;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        content: string;
    }>;
    getFAQs(): Promise<{
        category: string | null;
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        sortOrder: number;
        question: string;
        answer: string;
    }[]>;
    createFAQ(data: any): Promise<{
        category: string | null;
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        sortOrder: number;
        question: string;
        answer: string;
    }>;
    updateFAQ(id: string, data: any): Promise<{
        category: string | null;
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        sortOrder: number;
        question: string;
        answer: string;
    }>;
    deleteFAQ(id: string): Promise<{
        category: string | null;
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        sortOrder: number;
        question: string;
        answer: string;
    }>;
    getBlogPosts(): Promise<{
        id: string;
        slug: string;
        seoTitle: string | null;
        seoDescription: string | null;
        tags: string | null;
        viewCount: number;
        createdAt: Date;
        updatedAt: Date;
        status: string;
        title: string;
        content: string;
        excerpt: string | null;
        featuredImage: string | null;
        publishedAt: Date | null;
        authorId: string | null;
    }[]>;
    createBlogPost(data: any): Promise<{
        id: string;
        slug: string;
        seoTitle: string | null;
        seoDescription: string | null;
        tags: string | null;
        viewCount: number;
        createdAt: Date;
        updatedAt: Date;
        status: string;
        title: string;
        content: string;
        excerpt: string | null;
        featuredImage: string | null;
        publishedAt: Date | null;
        authorId: string | null;
    }>;
    updateBlogPost(id: string, data: any): Promise<{
        id: string;
        slug: string;
        seoTitle: string | null;
        seoDescription: string | null;
        tags: string | null;
        viewCount: number;
        createdAt: Date;
        updatedAt: Date;
        status: string;
        title: string;
        content: string;
        excerpt: string | null;
        featuredImage: string | null;
        publishedAt: Date | null;
        authorId: string | null;
    }>;
    deleteBlogPost(id: string): Promise<{
        id: string;
        slug: string;
        seoTitle: string | null;
        seoDescription: string | null;
        tags: string | null;
        viewCount: number;
        createdAt: Date;
        updatedAt: Date;
        status: string;
        title: string;
        content: string;
        excerpt: string | null;
        featuredImage: string | null;
        publishedAt: Date | null;
        authorId: string | null;
    }>;
    searchContent(query: string, type?: string): Promise<any[]>;
    backupContent(): Promise<{
        pages: {
            id: string;
            slug: string;
            isActive: boolean;
            seoTitle: string | null;
            seoDescription: string | null;
            createdAt: Date;
            updatedAt: Date;
            title: string;
            content: string;
        }[];
        posts: {
            id: string;
            slug: string;
            seoTitle: string | null;
            seoDescription: string | null;
            tags: string | null;
            viewCount: number;
            createdAt: Date;
            updatedAt: Date;
            status: string;
            title: string;
            content: string;
            excerpt: string | null;
            featuredImage: string | null;
            publishedAt: Date | null;
            authorId: string | null;
        }[];
        faqs: {
            category: string | null;
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            sortOrder: number;
            question: string;
            answer: string;
        }[];
    }>;
    getContentStats(): Promise<{
        pages: {
            count: number;
            type: string;
        };
        posts: {
            count: number;
            type: string;
        };
        faqs: {
            count: number;
            type: string;
        };
    }>;
}
