import { PrismaService } from '../prisma/prisma.service';
export declare class ProductManagementService {
    private prisma;
    constructor(prisma: PrismaService);
    createProduct(data: any): Promise<{
        category: {
            name: string;
            id: string;
            slug: string;
            description: string | null;
            isActive: boolean;
            metaDescription: string | null;
            image: string | null;
            parentId: string | null;
            sortOrder: number;
        };
        variants: {
            name: string;
            id: string;
            sku: string;
            price: number;
            isActive: boolean;
            stock: number;
            lowStockThreshold: number;
            productId: string;
            attributes: string | null;
            size: string | null;
            color: string | null;
            material: string | null;
        }[];
    } & {
        name: string;
        id: string;
        slug: string;
        sku: string;
        description: string | null;
        shortDescription: string | null;
        price: number;
        comparePrice: number | null;
        weight: number | null;
        dimensions: string | null;
        images: string | null;
        categoryId: string;
        brandId: string | null;
        isActive: boolean;
        isFeatured: boolean;
        seoTitle: string | null;
        seoDescription: string | null;
        metaDescription: string | null;
        tags: string | null;
        keywords: string | null;
        stock: number;
        lowStockThreshold: number;
        trackInventory: boolean;
        averageRating: number | null;
        totalReviews: number;
        viewCount: number;
        searchKeywords: string | null;
        relatedProducts: string | null;
        ageRestricted: boolean;
        minimumAge: number | null;
        warrantyPeriod: string | null;
        warrantyType: string | null;
        warrantyTerms: string | null;
        geographicRestrictions: string | null;
        restrictedRegions: string | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateProduct(id: string, data: any): Promise<{
        category: {
            name: string;
            id: string;
            slug: string;
            description: string | null;
            isActive: boolean;
            metaDescription: string | null;
            image: string | null;
            parentId: string | null;
            sortOrder: number;
        };
        variants: {
            name: string;
            id: string;
            sku: string;
            price: number;
            isActive: boolean;
            stock: number;
            lowStockThreshold: number;
            productId: string;
            attributes: string | null;
            size: string | null;
            color: string | null;
            material: string | null;
        }[];
    } & {
        name: string;
        id: string;
        slug: string;
        sku: string;
        description: string | null;
        shortDescription: string | null;
        price: number;
        comparePrice: number | null;
        weight: number | null;
        dimensions: string | null;
        images: string | null;
        categoryId: string;
        brandId: string | null;
        isActive: boolean;
        isFeatured: boolean;
        seoTitle: string | null;
        seoDescription: string | null;
        metaDescription: string | null;
        tags: string | null;
        keywords: string | null;
        stock: number;
        lowStockThreshold: number;
        trackInventory: boolean;
        averageRating: number | null;
        totalReviews: number;
        viewCount: number;
        searchKeywords: string | null;
        relatedProducts: string | null;
        ageRestricted: boolean;
        minimumAge: number | null;
        warrantyPeriod: string | null;
        warrantyType: string | null;
        warrantyTerms: string | null;
        geographicRestrictions: string | null;
        restrictedRegions: string | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    deleteProduct(id: string): Promise<{
        name: string;
        id: string;
        slug: string;
        sku: string;
        description: string | null;
        shortDescription: string | null;
        price: number;
        comparePrice: number | null;
        weight: number | null;
        dimensions: string | null;
        images: string | null;
        categoryId: string;
        brandId: string | null;
        isActive: boolean;
        isFeatured: boolean;
        seoTitle: string | null;
        seoDescription: string | null;
        metaDescription: string | null;
        tags: string | null;
        keywords: string | null;
        stock: number;
        lowStockThreshold: number;
        trackInventory: boolean;
        averageRating: number | null;
        totalReviews: number;
        viewCount: number;
        searchKeywords: string | null;
        relatedProducts: string | null;
        ageRestricted: boolean;
        minimumAge: number | null;
        warrantyPeriod: string | null;
        warrantyType: string | null;
        warrantyTerms: string | null;
        geographicRestrictions: string | null;
        restrictedRegions: string | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    bulkUpdateProducts(updates: Array<{
        id: string;
        data: any;
    }>): Promise<any[]>;
    bulkDeleteProducts(ids: string[]): Promise<import(".prisma/client").Prisma.BatchPayload>;
    importProductsFromCSV(filePath: string): Promise<unknown>;
    exportProductsToCSV(): Promise<{
        id: string;
        name: string;
        description: string;
        price: number;
        stock: number;
        category: string;
        sku: string;
        isActive: boolean;
    }[]>;
    createVariant(productId: string, data: any): Promise<{
        name: string;
        id: string;
        sku: string;
        price: number;
        isActive: boolean;
        stock: number;
        lowStockThreshold: number;
        productId: string;
        attributes: string | null;
        size: string | null;
        color: string | null;
        material: string | null;
    }>;
    updateVariant(id: string, data: any): Promise<{
        name: string;
        id: string;
        sku: string;
        price: number;
        isActive: boolean;
        stock: number;
        lowStockThreshold: number;
        productId: string;
        attributes: string | null;
        size: string | null;
        color: string | null;
        material: string | null;
    }>;
    deleteVariant(id: string): Promise<{
        name: string;
        id: string;
        sku: string;
        price: number;
        isActive: boolean;
        stock: number;
        lowStockThreshold: number;
        productId: string;
        attributes: string | null;
        size: string | null;
        color: string | null;
        material: string | null;
    }>;
    createCategory(data: any): Promise<{
        name: string;
        id: string;
        slug: string;
        description: string | null;
        isActive: boolean;
        metaDescription: string | null;
        image: string | null;
        parentId: string | null;
        sortOrder: number;
    }>;
    updateCategory(id: string, data: any): Promise<{
        name: string;
        id: string;
        slug: string;
        description: string | null;
        isActive: boolean;
        metaDescription: string | null;
        image: string | null;
        parentId: string | null;
        sortOrder: number;
    }>;
    reorderCategories(orders: Array<{
        id: string;
        sortOrder: number;
    }>): Promise<any[]>;
    getProductAnalytics(productId: string): Promise<{
        product: {
            category: {
                name: string;
                id: string;
                slug: string;
                description: string | null;
                isActive: boolean;
                metaDescription: string | null;
                image: string | null;
                parentId: string | null;
                sortOrder: number;
            };
        } & {
            name: string;
            id: string;
            slug: string;
            sku: string;
            description: string | null;
            shortDescription: string | null;
            price: number;
            comparePrice: number | null;
            weight: number | null;
            dimensions: string | null;
            images: string | null;
            categoryId: string;
            brandId: string | null;
            isActive: boolean;
            isFeatured: boolean;
            seoTitle: string | null;
            seoDescription: string | null;
            metaDescription: string | null;
            tags: string | null;
            keywords: string | null;
            stock: number;
            lowStockThreshold: number;
            trackInventory: boolean;
            averageRating: number | null;
            totalReviews: number;
            viewCount: number;
            searchKeywords: string | null;
            relatedProducts: string | null;
            ageRestricted: boolean;
            minimumAge: number | null;
            warrantyPeriod: string | null;
            warrantyType: string | null;
            warrantyTerms: string | null;
            geographicRestrictions: string | null;
            restrictedRegions: string | null;
            createdAt: Date;
            updatedAt: Date;
        };
        analytics: {
            totalSales: number;
            totalQuantitySold: number;
            viewCount: number;
            averageRating: number;
            totalReviews: number;
            conversionRate: number;
        };
    }>;
    private generateSlug;
    private generateSKU;
}
