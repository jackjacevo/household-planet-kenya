generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                      @id @default(autoincrement())
  email                   String                   @unique
  phone                   String?
  phoneVerified           Boolean                  @default(false)
  phoneVerificationToken  String?
  phoneVerificationExpiry DateTime?
  name                    String
  role                    String                   @default("CUSTOMER")
  firstName               String?
  lastName                String?
  password                String
  emailVerified           Boolean                  @default(false)
  resetToken              String?
  resetTokenExpiry        DateTime?
  verificationToken       String?
  verificationTokenExpiry DateTime?
  refreshToken            String?
  socialProviders         String?
  googleId                String?
  facebookId              String?
  appleId                 String?
  twoFactorEnabled        Boolean                  @default(false)
  twoFactorSecret         String?
  backupCodes             String?
  loginAttempts           Int                      @default(0)
  lockedUntil             DateTime?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  avatar                  String?
  dateOfBirth             String?
  gender                  String?
  notificationSettings    String?
  privacySettings         String?
  marketingConsent        Boolean                  @default(false)
  analyticsConsent        Boolean                  @default(false)
  permissions             String?
  isActive                Boolean                  @default(true)
  lastLogin               DateTime?
  addresses               Address[]
  activities              AdminActivity[]
  cart                    Cart[]
  consentLogs             ConsentLog[]
  customerProfile         CustomerProfile?
  dataDeletionRequests    DataDeletionRequest[]
  dataExportRequests      DataExportRequest[]
  emailVerificationTokens EmailVerificationToken[]
  orders                  Order[]
  passwordResetTokens     PasswordResetToken[]
  phoneVerificationTokens PhoneVerificationToken[]
  recentlyViewed          RecentlyViewed[]
  reviews                 Review[]
  supportTickets          SupportTicket[]
  userConsent             UserConsent?
  userPrivacySettings     UserPrivacySettings?
  sessions                UserSession[]
  wishlist                Wishlist[]

  @@map("users")
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  slug        String     @unique
  description String?
  image       String?
  parentId    Int?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@index([slug])
  @@index([parentId])
  @@map("categories")
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @unique
  logo     String?
  isActive Boolean   @default(true)
  products Product[]

  @@map("brands")
}

model Product {
  id               Int                     @id @default(autoincrement())
  name             String
  slug             String                  @unique
  description      String?
  shortDescription String?
  sku              String                  @unique
  price            Float
  comparePrice     Float?
  weight           Float?
  dimensions       String?
  images           String
  imageAltTexts    String?
  categoryId       Int
  brandId          Int?
  isActive         Boolean                 @default(true)
  isFeatured       Boolean                 @default(false)
  seoTitle         String?
  seoDescription   String?
  tags             String
  searchVector     String?
  averageRating    Float?                  @default(0)
  totalReviews     Int                     @default(0)
  totalSales       Int                     @default(0)
  viewCount        Int                     @default(0)
  hasVariants      Boolean                 @default(false)
  minPrice         Float?
  maxPrice         Float?
  stock            Int                     @default(0)
  lowStockThreshold Int                    @default(5)
  trackStock       Boolean                 @default(true)
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  cart             Cart[]
  orderItems       OrderItem[]
  recommendedBy    ProductRecommendation[] @relation("RecommendedProducts")
  recommendations  ProductRecommendation[] @relation("ProductRecommendations")
  variants         ProductVariant[]
  brand            Brand?                  @relation(fields: [brandId], references: [id])
  category         Category                @relation(fields: [categoryId], references: [id])
  recentlyViewed   RecentlyViewed[]
  reviews          Review[]
  wishlist         Wishlist[]

  @@index([slug])
  @@index([categoryId])
  @@index([brandId])
  @@index([isActive])
  @@index([isFeatured])
  @@index([searchVector])
  @@index([averageRating])
  @@index([totalSales])
  @@map("products")
}

model ProductVariant {
  id                Int            @id @default(autoincrement())
  productId         Int
  name              String
  sku               String         @unique
  price             Float
  stock             Int            @default(0)
  lowStockThreshold Int            @default(5)
  attributes        String?
  size              String?
  color             String?
  material          String?
  weight            Float?
  dimensions        String?
  images            String?
  isActive          Boolean        @default(true)
  sortOrder         Int            @default(0)
  cart              Cart[]
  lowStockAlerts    LowStockAlert?
  orderItems        OrderItem[]
  product           Product        @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([isActive])
  @@map("product_variants")
}

model ProductRecommendation {
  id                   Int      @id @default(autoincrement())
  productId            Int
  recommendedProductId Int
  score                Float    @default(0)
  type                 String
  createdAt            DateTime @default(now())
  recommendedProduct   Product  @relation("RecommendedProducts", fields: [recommendedProductId], references: [id], onDelete: Cascade)
  product              Product  @relation("ProductRecommendations", fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, recommendedProductId, type])
  @@map("product_recommendations")
}

model RecentlyViewed {
  id        Int      @id @default(autoincrement())
  userId    Int?
  sessionId String?
  productId Int
  viewedAt  DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@unique([sessionId, productId])
  @@index([userId, viewedAt])
  @@index([sessionId, viewedAt])
  @@map("recently_viewed")
}

model LowStockAlert {
  id        Int            @id @default(autoincrement())
  variantId Int            @unique
  threshold Int
  isActive  Boolean        @default(true)
  createdAt DateTime       @default(now())
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("low_stock_alerts")
}

model Order {
  id                  Int                  @id @default(autoincrement())
  userId              Int?
  orderNumber         String               @unique
  status              String               @default("PENDING")
  subtotal            Float
  shippingCost        Float
  total               Float
  shippingAddress     String
  deliveryLocation    String?
  deliveryPrice       Float?
  paymentMethod       String
  paymentStatus       String               @default("PENDING")
  trackingNumber      String?
  priority            String               @default("NORMAL")
  tags                String?
  source              String               @default("WEB")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  delivery            Delivery?
  communications      OrderCommunication[]
  items               OrderItem[]
  notes               OrderNote[]
  statusHistory       OrderStatusHistory[]
  user                User?                @relation(fields: [userId], references: [id])
  paymentTransactions PaymentTransaction[]
  returnRequests      ReturnRequest[]

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([trackingNumber])
  @@map("orders")
}

model OrderItem {
  id          Int             @id @default(autoincrement())
  orderId     Int
  productId   Int
  variantId   Int?
  quantity    Int
  price       Float
  total       Float
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  product     Product         @relation(fields: [productId], references: [id])
  order       Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  returnItems ReturnItem[]

  @@index([orderId])
  @@map("order_items")
}

model Address {
  id           Int                  @id @default(autoincrement())
  userId       Int
  type         String
  fullName     String
  phone        String
  county       String
  town         String
  street       String
  isDefault    Boolean              @default(false)
  verification AddressVerification?
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("addresses")
}

model Cart {
  id        Int             @id @default(autoincrement())
  userId    Int
  productId Int
  variantId Int?
  quantity  Int
  createdAt DateTime        @default(now())
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId])
  @@index([userId])
  @@map("cart")
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@map("wishlist")
}

model Review {
  id         Int      @id @default(autoincrement())
  productId  Int
  userId     Int
  rating     Int
  title      String?
  comment    String?
  images     String?
  pros       String?
  cons       String?
  isVerified Boolean  @default(false)
  isHelpful  Int      @default(0)
  isReported Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@index([productId])
  @@index([rating])
  @@index([isVerified])
  @@map("reviews")
}

model PaymentTransaction {
  id                 Int       @id @default(autoincrement())
  orderId            Int?
  merchantRequestId  String?
  checkoutRequestId  String    @unique
  phoneNumber        String
  amount             Float
  status             String    @default("PENDING")
  provider           String    @default("MPESA")
  paymentType        String    @default("STK_PUSH") // STK_PUSH, PAYBILL, CASH
  mpesaReceiptNumber String?
  transactionDate    DateTime?
  resultCode         String?
  resultDescription  String?
  cashReceivedBy     String?   // For cash payments
  paybillReference   String?   // For paybill payments
  notes              String?   // Additional notes
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  order              Order?    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([checkoutRequestId])
  @@index([status])
  @@index([provider])
  @@index([paymentType])
  @@map("payment_transactions")
}

model Delivery {
  id                  Int                     @id @default(autoincrement())
  orderId             Int                     @unique
  trackingNumber      String                  @unique
  status              String                  @default("PENDING")
  scheduledDate       DateTime?
  timeSlot            String?
  specialInstructions String?
  notes               String?
  photoProof          String?
  failureReason       String?
  rescheduleCount     Int                     @default(0)
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  order               Order                   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  feedback            DeliveryFeedback?
  statusHistory       DeliveryStatusHistory[]

  @@index([trackingNumber])
  @@index([status])
  @@map("deliveries")
}

model DeliveryStatusHistory {
  id         Int      @id @default(autoincrement())
  deliveryId Int
  status     String
  notes      String?
  timestamp  DateTime @default(now())
  delivery   Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
  @@map("delivery_status_history")
}

model DeliveryFeedback {
  id         Int      @id @default(autoincrement())
  deliveryId Int      @unique
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  delivery   Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@map("delivery_feedback")
}

model SupportTicket {
  id           String          @id @default(cuid())
  ticketNumber String          @unique
  userId       Int
  subject      String
  category     String
  priority     String
  status       String          @default("OPEN")
  description  String
  orderId      String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages     TicketMessage[]

  @@index([userId])
  @@index([status])
  @@map("support_tickets")
}

model TicketMessage {
  id             String        @id @default(cuid())
  ticketId       String
  message        String
  isFromCustomer Boolean
  attachments    String?
  createdAt      DateTime      @default(now())
  ticket         SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@map("ticket_messages")
}

model ReturnRequest {
  id                  String       @id @default(cuid())
  returnNumber        String       @unique
  orderId             Int
  type                String
  status              String       @default("PENDING")
  reason              String
  preferredResolution String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  items               ReturnItem[]
  order               Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([status])
  @@map("return_requests")
}

model ReturnItem {
  id              String        @id @default(cuid())
  returnRequestId String
  orderItemId     Int
  quantity        Int
  reason          String
  orderItem       OrderItem     @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  returnRequest   ReturnRequest @relation(fields: [returnRequestId], references: [id], onDelete: Cascade)

  @@index([returnRequestId])
  @@index([orderItemId])
  @@map("return_items")
}

model OrderNote {
  id         Int      @id @default(autoincrement())
  orderId    Int
  note       String
  isInternal Boolean  @default(true)
  createdBy  String?
  createdAt  DateTime @default(now())
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("order_notes")
}

model OrderStatusHistory {
  id        Int      @id @default(autoincrement())
  orderId   Int
  status    String
  notes     String?
  changedBy String?
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("order_status_history")
}

model OrderCommunication {
  id       Int      @id @default(autoincrement())
  orderId  Int
  type     String
  template String?
  subject  String?
  message  String
  sentAt   DateTime @default(now())
  sentBy   String?
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("order_communications")
}

model CustomerProfile {
  id                       Int                     @id @default(autoincrement())
  userId                   Int                     @unique
  loyaltyPoints            Int                     @default(0)
  totalSpent               Float                   @default(0)
  totalOrders              Int                     @default(0)
  averageOrderValue        Float                   @default(0)
  lastOrderDate            DateTime?
  preferredCategories      String?
  communicationPreferences String?
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  communications           CustomerCommunication[]
  user                     User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags                     CustomerTag[]
  loyaltyTransactions      LoyaltyTransaction[]

  @@map("customer_profiles")
}

model CustomerTag {
  id        Int             @id @default(autoincrement())
  profileId Int
  tag       String
  createdAt DateTime        @default(now())
  profile   CustomerProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, tag])
  @@index([tag])
  @@map("customer_tags")
}

model CustomerCommunication {
  id        Int             @id @default(autoincrement())
  profileId Int
  type      String
  subject   String?
  message   String
  channel   String
  status    String          @default("SENT")
  sentAt    DateTime        @default(now())
  sentBy    String?
  metadata  String?
  profile   CustomerProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([type])
  @@map("customer_communications")
}

model LoyaltyProgram {
  id           Int                  @id @default(autoincrement())
  name         String
  description  String?
  isActive     Boolean              @default(true)
  pointsPerKsh Float                @default(1)
  minimumSpend Float                @default(0)
  rules        String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  rewards      LoyaltyReward[]
  transactions LoyaltyTransaction[]

  @@map("loyalty_programs")
}

model LoyaltyTransaction {
  id          Int             @id @default(autoincrement())
  profileId   Int
  programId   Int
  orderId     Int?
  type        String
  points      Int
  description String?
  createdAt   DateTime        @default(now())
  program     LoyaltyProgram  @relation(fields: [programId], references: [id], onDelete: Cascade)
  profile     CustomerProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([programId])
  @@map("loyalty_transactions")
}

model LoyaltyReward {
  id          Int                 @id @default(autoincrement())
  programId   Int
  name        String
  description String?
  pointsCost  Int
  rewardType  String
  rewardValue Float?
  isActive    Boolean             @default(true)
  validUntil  DateTime?
  createdAt   DateTime            @default(now())
  redemptions LoyaltyRedemption[]
  program     LoyaltyProgram      @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@index([programId])
  @@map("loyalty_rewards")
}

model LoyaltyRedemption {
  id         Int           @id @default(autoincrement())
  profileId  Int
  rewardId   Int
  orderId    Int?
  status     String        @default("PENDING")
  redeemedAt DateTime      @default(now())
  reward     LoyaltyReward @relation(fields: [rewardId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([rewardId])
  @@map("loyalty_redemptions")
}

model AddressVerification {
  id          Int       @id @default(autoincrement())
  addressId   Int       @unique
  status      String    @default("PENDING")
  verifiedBy  String?
  verifiedAt  DateTime?
  notes       String?
  coordinates String?
  createdAt   DateTime  @default(now())
  address     Address   @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@map("address_verifications")
}

model WhatsAppMessage {
  id               Int      @id @default(autoincrement())
  phoneNumber      String
  message          String
  timestamp        DateTime
  messageId        String?  @unique
  isOrderCandidate Boolean  @default(false)
  processed        Boolean  @default(false)
  orderId          Int?
  createdAt        DateTime @default(now())

  @@index([phoneNumber])
  @@index([processed])
  @@index([isOrderCandidate])
  @@map("whatsapp_messages")
}

model ContentPage {
  id              Int      @id @default(autoincrement())
  slug            String   @unique
  title           String
  content         String
  metaTitle       String?
  metaDescription String?
  isPublished     Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([slug])
  @@map("content_pages")
}

model Banner {
  id         Int       @id @default(autoincrement())
  title      String
  subtitle   String?
  image      String
  link       String?
  buttonText String?
  position   String    @default("HERO")
  isActive   Boolean   @default(true)
  sortOrder  Int       @default(0)
  startDate  DateTime?
  endDate    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([position, isActive])
  @@map("banners")
}

model EmailTemplate {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  subject     String
  htmlContent String
  textContent String?
  variables   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
  @@map("email_templates")
}

model FAQ {
  id          Int      @id @default(autoincrement())
  question    String
  answer      String
  category    String?
  isPublished Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category, isPublished])
  @@map("faqs")
}

model BlogPost {
  id              Int       @id @default(autoincrement())
  slug            String    @unique
  title           String
  excerpt         String?
  content         String
  featuredImage   String?
  author          String
  tags            String?
  metaTitle       String?
  metaDescription String?
  isPublished     Boolean   @default(false)
  publishedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([slug])
  @@index([isPublished, publishedAt])
  @@map("blog_posts")
}

model AnalyticsEvent {
  id         Int      @id @default(autoincrement())
  event      String
  properties String
  userId     String?
  sessionId  String
  timestamp  DateTime @default(now())
  userAgent  String?
  ipAddress  String?
  referrer   String?
  pageUrl    String?

  @@index([event])
  @@index([sessionId])
  @@index([userId])
  @@index([timestamp])
  @@map("analytics_events")
}

model ABTest {
  id          Int                @id @default(autoincrement())
  name        String             @unique
  description String?
  isActive    Boolean            @default(true)
  variants    String
  startDate   DateTime           @default(now())
  endDate     DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  assignments ABTestAssignment[]
  conversions ABTestConversion[]

  @@index([name, isActive])
  @@map("ab_tests")
}

model ABTestAssignment {
  id         Int      @id @default(autoincrement())
  testId     Int
  userId     String?
  sessionId  String
  variant    String
  assignedAt DateTime @default(now())
  test       ABTest   @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@unique([testId, sessionId])
  @@index([testId, variant])
  @@map("ab_test_assignments")
}

model ABTestConversion {
  id             Int      @id @default(autoincrement())
  testId         Int
  sessionId      String
  variant        String
  conversionType String
  value          Float?
  convertedAt    DateTime @default(now())
  test           ABTest   @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([testId, variant])
  @@index([conversionType])
  @@map("ab_test_conversions")
}

model SearchQuery {
  id          Int      @id @default(autoincrement())
  query       String
  userId      Int?
  resultCount Int      @default(0)
  timestamp   DateTime @default(now())
  filters     String?
  sessionId   String?

  @@index([query])
  @@index([userId])
  @@index([timestamp])
  @@map("search_queries")
}

model ProductAttribute {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  type      String
  values    String
  isActive  Boolean  @default(true)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  @@index([name])
  @@map("product_attributes")
}

model BulkImportJob {
  id            String    @id @default(cuid())
  filename      String
  status        String    @default("PENDING")
  totalRows     Int       @default(0)
  processedRows Int       @default(0)
  successRows   Int       @default(0)
  errorRows     Int       @default(0)
  errors        String?
  createdBy     String?
  createdAt     DateTime  @default(now())
  completedAt   DateTime?

  @@index([status])
  @@map("bulk_import_jobs")
}

model UserConsent {
  id             String   @id @default(cuid())
  userId         Int      @unique
  cookieConsent  String
  consentVersion String   @default("1.0")
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_consents")
}

model ConsentLog {
  id          String   @id @default(cuid())
  userId      Int
  consentType String
  granted     Boolean
  purpose     String?
  ipAddress   String
  userAgent   String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([consentType])
  @@map("consent_logs")
}

model DataExportRequest {
  id          String    @id @default(cuid())
  userId      Int
  reason      String?
  status      String    @default("pending")
  exportData  String?
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@map("data_export_requests")
}

model DataDeletionRequest {
  id                String    @id @default(cuid())
  userId            Int
  reason            String
  status            String    @default("pending")
  scheduledDeletion DateTime
  createdAt         DateTime  @default(now())
  completedAt       DateTime?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([scheduledDeletion])
  @@map("data_deletion_requests")
}

model UserPrivacySettings {
  id                String   @id @default(cuid())
  userId            Int      @unique
  profileVisibility Boolean  @default(true)
  dataProcessing    Boolean  @default(true)
  marketingEmails   Boolean  @default(false)
  analyticsTracking Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_privacy_settings")
}

model DataRetentionPolicy {
  id            String   @id @default(cuid())
  dataType      String   @unique
  retentionDays Int
  description   String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("data_retention_policies")
}

model DataBreachLog {
  id            String    @id @default(cuid())
  type          String
  severity      String
  description   String
  affectedUsers Int       @default(0)
  reportedAt    DateTime  @default(now())
  resolvedAt    DateTime?
  status        String    @default("reported")
  actions       String?

  @@index([type])
  @@index([severity])
  @@index([status])
  @@map("data_breach_logs")
}

model LegalAgreement {
  id           String   @id @default(cuid())
  userId       String
  documentType String
  version      String
  agreedAt     DateTime @default(now())
  ipAddress    String?
  userAgent    String?
  status       String   @default("ACTIVE")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([documentType])
  @@index([status])
  @@map("legal_agreements")
}

model LegalDocumentRequest {
  id           String    @id @default(cuid())
  userId       String
  documentType String
  requestType  String
  reason       String?
  status       String    @default("PENDING")
  requestedAt  DateTime  @default(now())
  processedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([userId])
  @@index([status])
  @@map("legal_document_requests")
}

model ConsentWithdrawal {
  id          String   @id @default(cuid())
  userId      String
  consentType String
  reason      String?
  withdrawnAt DateTime @default(now())
  status      String   @default("PROCESSED")
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([consentType])
  @@map("consent_withdrawals")
}

model AdminActivity {
  id         Int      @id @default(autoincrement())
  userId     Int
  action     String
  details    String
  entityType String?
  entityId   Int?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([entityType])
  @@index([createdAt])
  @@map("admin_activities")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       Int
  token        String   @unique
  refreshToken String?  @unique
  deviceInfo   String
  ipAddress    String
  userAgent    String
  isActive     Boolean  @default(true)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  lastUsedAt   DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([isActive])
  @@map("user_sessions")
}

model LoginAttempt {
  id            String   @id @default(cuid())
  email         String
  ipAddress     String
  userAgent     String
  success       Boolean
  failureReason String?
  createdAt     DateTime @default(now())

  @@index([email])
  @@index([ipAddress])
  @@index([createdAt])
  @@map("login_attempts")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("email_verification_tokens")
}

model PhoneVerificationToken {
  id        String   @id @default(cuid())
  userId    Int
  phone     String
  token     String
  expiresAt DateTime
  attempts  Int      @default(0)
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([phone])
  @@index([userId])
  @@map("phone_verification_tokens")
}

model Setting {
  id          Int      @id @default(autoincrement())
  category    String   // 'company', 'payment', 'notification', etc.
  key         String   // 'site_name', 'mpesa_shortcode', etc.
  value       String   // JSON string for complex values
  type        String   // 'string', 'number', 'boolean', 'json', 'file'
  description String?  // Human readable description
  isPublic    Boolean  @default(false) // Whether this setting can be accessed by frontend
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([category, key])
  @@index([category])
  @@index([isPublic])
  @@map("settings")
}
