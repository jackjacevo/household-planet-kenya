generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  phone         String?
  phoneVerified Boolean   @default(false)
  name          String
  role          Role      @default(CUSTOMER)
  password      String
  emailVerified Boolean   @default(false)
  resetToken    String?
  resetTokenExpiry DateTime?
  verificationToken String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  orders    Order[]
  addresses Address[]
  cart      Cart[]
  wishlist  Wishlist[]
  reviews   Review[]
  recentlyViewed RecentlyViewed[]
  supportTickets SupportTicket[]
  avatar    String?
  dateOfBirth String?
  gender    String?
  notificationSettings Json?
  privacySettings Json?
  customerProfile CustomerProfile?
  userConsent UserConsent?
  userPrivacySettings UserPrivacySettings?
  consentLogs ConsentLog[]
  dataExportRequests DataExportRequest[]
  dataDeletionRequests DataDeletionRequest[]
  marketingConsent Boolean @default(false)
  analyticsConsent Boolean @default(false)
  permissions String? // JSON array of permissions for staff
  isActive Boolean @default(true)
  lastLogin DateTime?
  activities AdminActivity[]

  @@map("users")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  image       String?
  parentId    Int?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@index([slug])
  @@index([parentId])
  @@map("categories")
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @unique
  logo     String?
  isActive Boolean   @default(true)

  products Product[]

  @@map("brands")
}

model Product {
  id               Int      @id @default(autoincrement())
  name             String
  slug             String   @unique
  description      String?
  shortDescription String?
  sku              String   @unique
  price            Decimal
  comparePrice     Decimal?
  weight           Decimal?
  dimensions       String?
  images           String
  imageAltTexts    String?  // JSON string for image alt texts
  categoryId       Int
  brandId          Int?
  isActive         Boolean  @default(true)
  isFeatured       Boolean  @default(false)
  seoTitle         String?
  seoDescription   String?
  tags             String
  searchVector     String?  // For search optimization
  averageRating    Decimal? @default(0)
  totalReviews     Int      @default(0)
  totalSales       Int      @default(0)
  viewCount        Int      @default(0)
  hasVariants      Boolean  @default(false)
  minPrice         Decimal?
  maxPrice         Decimal?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id])
  brand    Brand?   @relation(fields: [brandId], references: [id])

  variants   ProductVariant[]
  orderItems OrderItem[]
  cart       Cart[]
  wishlist   Wishlist[]
  reviews    Review[]
  recentlyViewed RecentlyViewed[]
  recommendations ProductRecommendation[] @relation("ProductRecommendations")
  recommendedBy   ProductRecommendation[] @relation("RecommendedProducts")

  @@index([slug])
  @@index([categoryId])
  @@index([brandId])
  @@index([isActive])
  @@index([isFeatured])
  @@index([searchVector])
  @@index([averageRating])
  @@index([totalSales])
  @@map("products")
}

model ProductVariant {
  id         Int                    @id @default(autoincrement())
  productId  Int
  name       String
  sku        String                 @unique
  price      Decimal
  stock      Int                    @default(0)
  lowStockThreshold Int           @default(5)
  attributes Json?
  size       String?
  color      String?
  material   String?
  weight     Decimal?
  dimensions String?
  images     String?                // JSON array of variant-specific images
  isActive   Boolean                @default(true)
  sortOrder  Int                    @default(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  orderItems OrderItem[]
  cart       Cart[]
  lowStockAlerts LowStockAlert[]

  @@index([productId])
  @@index([isActive])
  @@map("product_variants")
}

model ProductRecommendation {
  id                Int @id @default(autoincrement())
  productId         Int
  recommendedProductId Int
  score             Float @default(0)
  type              RecommendationType
  createdAt         DateTime @default(now())

  product           Product @relation("ProductRecommendations", fields: [productId], references: [id], onDelete: Cascade)
  recommendedProduct Product @relation("RecommendedProducts", fields: [recommendedProductId], references: [id], onDelete: Cascade)

  @@unique([productId, recommendedProductId, type])
  @@map("product_recommendations")
}

model RecentlyViewed {
  id        Int      @id @default(autoincrement())
  userId    Int?
  sessionId String?
  productId Int
  viewedAt  DateTime @default(now())

  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@unique([sessionId, productId])
  @@index([userId, viewedAt])
  @@index([sessionId, viewedAt])
  @@map("recently_viewed")
}

model LowStockAlert {
  id        Int      @id @default(autoincrement())
  variantId Int
  threshold Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([variantId])
  @@map("low_stock_alerts")
}

model Order {
  id              Int           @id @default(autoincrement())
  userId          Int
  orderNumber     String        @unique
  status          OrderStatus   @default(PENDING)
  subtotal        Decimal
  shippingCost    Decimal
  total           Decimal
  shippingAddress Json
  deliveryLocation String?
  deliveryPrice   Decimal?
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  trackingNumber  String?
  priority        String        @default("NORMAL")
  tags            String?
  source          String        @default("WEB")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]
  paymentTransactions PaymentTransaction[]
  delivery Delivery?
  returnRequests ReturnRequest[]
  notes OrderNote[]
  statusHistory OrderStatusHistory[]
  communications OrderCommunication[]

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([trackingNumber])
  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  variantId Int?
  quantity  Int
  price     Decimal
  total     Decimal

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])
  returnItems ReturnItem[]

  @@index([orderId])
  @@map("order_items")
}

model Address {
  id       Int         @id @default(autoincrement())
  userId   Int
  type     AddressType
  fullName String
  phone    String
  county   String
  town     String
  street   String
  isDefault Boolean    @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  verification AddressVerification?

  @@index([userId])
  @@map("addresses")
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  variantId Int?
  quantity  Int
  createdAt DateTime @default(now())

  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId])
  @@index([userId])
  @@map("cart")
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@map("wishlist")
}

model Review {
  id         Int      @id @default(autoincrement())
  productId  Int
  userId     Int
  rating     Int
  title      String?
  comment    String?
  images     String?  // JSON array of review images
  pros       String?  // JSON array of pros
  cons       String?  // JSON array of cons
  isVerified Boolean  @default(false)
  isHelpful  Int      @default(0)
  isReported Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@index([productId])
  @@index([rating])
  @@index([isVerified])
  @@map("reviews")
}

model PaymentTransaction {
  id                  Int      @id @default(autoincrement())
  orderId             Int
  merchantRequestId   String?
  checkoutRequestId   String   @unique
  phoneNumber         String
  amount              Decimal
  status              PaymentTransactionStatus @default(PENDING)
  provider            String   @default("MPESA")
  mpesaReceiptNumber  String?
  transactionDate     DateTime?
  resultCode          String?
  resultDescription   String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([checkoutRequestId])
  @@index([status])
  @@map("payment_transactions")
}

enum Role {
  GUEST
  CUSTOMER
  STAFF
  ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  MPESA
  CARD
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AddressType {
  HOME
  OFFICE
  OTHER
}

enum RecommendationType {
  RELATED
  FREQUENTLY_BOUGHT_TOGETHER
  SIMILAR
  TRENDING
}

enum PaymentTransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
  REFUNDED
}

model Delivery {
  id                Int      @id @default(autoincrement())
  orderId           Int      @unique
  trackingNumber    String   @unique
  status            String   @default("PENDING")
  scheduledDate     DateTime?
  timeSlot          String?
  specialInstructions String?
  notes             String?
  photoProof        String?
  failureReason     String?
  rescheduleCount   Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  order         Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  statusHistory DeliveryStatusHistory[]
  feedback      DeliveryFeedback?

  @@index([trackingNumber])
  @@index([status])
  @@map("deliveries")
}

model DeliveryStatusHistory {
  id         Int      @id @default(autoincrement())
  deliveryId Int
  status     String
  notes      String?
  timestamp  DateTime @default(now())

  delivery Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
  @@map("delivery_status_history")
}

model DeliveryFeedback {
  id         Int      @id @default(autoincrement())
  deliveryId Int      @unique
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())

  delivery Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@map("delivery_feedback")
}

model SupportTicket {
  id           String   @id @default(cuid())
  ticketNumber String   @unique
  userId       Int
  subject      String
  category     String
  priority     String
  status       String   @default("OPEN")
  description  String
  orderId      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages TicketMessage[]

  @@index([userId])
  @@index([status])
  @@map("support_tickets")
}

model TicketMessage {
  id             String   @id @default(cuid())
  ticketId       String
  message        String
  isFromCustomer Boolean
  attachments    Json?
  createdAt      DateTime @default(now())

  ticket SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@map("ticket_messages")
}

model ReturnRequest {
  id                  String   @id @default(cuid())
  returnNumber        String   @unique
  orderId             Int
  type                String
  status              String   @default("PENDING")
  reason              String
  preferredResolution String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  order Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  items ReturnItem[]

  @@index([orderId])
  @@index([status])
  @@map("return_requests")
}

model ReturnItem {
  id              String @id @default(cuid())
  returnRequestId String
  orderItemId     Int
  quantity        Int
  reason          String

  returnRequest ReturnRequest @relation(fields: [returnRequestId], references: [id], onDelete: Cascade)
  orderItem     OrderItem     @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@index([returnRequestId])
  @@index([orderItemId])
  @@map("return_items")
}

model OrderNote {
  id        Int      @id @default(autoincrement())
  orderId   Int
  note      String
  isInternal Boolean @default(true)
  createdBy String?
  createdAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("order_notes")
}

model OrderStatusHistory {
  id        Int      @id @default(autoincrement())
  orderId   Int
  status    OrderStatus
  notes     String?
  changedBy String?
  createdAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("order_status_history")
}

model OrderCommunication {
  id        Int      @id @default(autoincrement())
  orderId   Int
  type      String
  template  String?
  subject   String?
  message   String
  sentAt    DateTime @default(now())
  sentBy    String?

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("order_communications")
}

model CustomerProfile {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  loyaltyPoints     Int      @default(0)
  totalSpent        Decimal  @default(0)
  totalOrders       Int      @default(0)
  averageOrderValue Decimal  @default(0)
  lastOrderDate     DateTime?
  preferredCategories String?
  communicationPreferences Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags CustomerTag[]
  communications CustomerCommunication[]
  loyaltyTransactions LoyaltyTransaction[]

  @@map("customer_profiles")
}

model CustomerTag {
  id        Int      @id @default(autoincrement())
  profileId Int
  tag       String
  createdAt DateTime @default(now())

  profile CustomerProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, tag])
  @@index([tag])
  @@map("customer_tags")
}

model CustomerCommunication {
  id        Int      @id @default(autoincrement())
  profileId Int
  type      CommunicationType
  subject   String?
  message   String
  channel   String
  status    String   @default("SENT")
  sentAt    DateTime @default(now())
  sentBy    String?
  metadata  Json?

  profile CustomerProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([type])
  @@map("customer_communications")
}

model LoyaltyProgram {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean  @default(true)
  pointsPerKsh Decimal @default(1)
  minimumSpend Decimal @default(0)
  rules       Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  transactions LoyaltyTransaction[]
  rewards      LoyaltyReward[]

  @@map("loyalty_programs")
}

model LoyaltyTransaction {
  id          Int      @id @default(autoincrement())
  profileId   Int
  programId   Int
  orderId     Int?
  type        LoyaltyTransactionType
  points      Int
  description String?
  createdAt   DateTime @default(now())

  profile CustomerProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  program LoyaltyProgram @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([programId])
  @@map("loyalty_transactions")
}

model LoyaltyReward {
  id          Int      @id @default(autoincrement())
  programId   Int
  name        String
  description String?
  pointsCost  Int
  rewardType  String
  rewardValue Decimal?
  isActive    Boolean  @default(true)
  validUntil  DateTime?
  createdAt   DateTime @default(now())

  program LoyaltyProgram @relation(fields: [programId], references: [id], onDelete: Cascade)
  redemptions LoyaltyRedemption[]

  @@index([programId])
  @@map("loyalty_rewards")
}

model LoyaltyRedemption {
  id        Int      @id @default(autoincrement())
  profileId Int
  rewardId  Int
  orderId   Int?
  status    String   @default("PENDING")
  redeemedAt DateTime @default(now())

  reward LoyaltyReward @relation(fields: [rewardId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([rewardId])
  @@map("loyalty_redemptions")
}

model AddressVerification {
  id          Int      @id @default(autoincrement())
  addressId   Int      @unique
  status      VerificationStatus @default(PENDING)
  verifiedBy  String?
  verifiedAt  DateTime?
  notes       String?
  coordinates Json?
  createdAt   DateTime @default(now())

  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@map("address_verifications")
}

enum CommunicationType {
  EMAIL
  SMS
  PUSH_NOTIFICATION
  IN_APP
  PHONE_CALL
}

enum LoyaltyTransactionType {
  EARNED
  REDEEMED
  EXPIRED
  ADJUSTED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  FAILED
  REJECTED
}

enum BannerPosition {
  HERO
  SECONDARY
  SIDEBAR
  FOOTER
}

model WhatsAppMessage {
  id              Int      @id @default(autoincrement())
  phoneNumber     String
  message         String
  timestamp       DateTime
  messageId       String?  @unique
  isOrderCandidate Boolean @default(false)
  processed       Boolean  @default(false)
  orderId         Int?
  createdAt       DateTime @default(now())

  @@index([phoneNumber])
  @@index([processed])
  @@index([isOrderCandidate])
  @@map("whatsapp_messages")
}

model ContentPage {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  content     String
  metaTitle   String?
  metaDescription String?
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@map("content_pages")
}

model Banner {
  id          Int      @id @default(autoincrement())
  title       String
  subtitle    String?
  image       String
  link        String?
  buttonText  String?
  position    String   @default("HERO")
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([position, isActive])
  @@map("banners")
}

model EmailTemplate {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  subject     String
  htmlContent String
  textContent String?
  variables   Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
  @@map("email_templates")
}

model FAQ {
  id          Int      @id @default(autoincrement())
  question    String
  answer      String
  category    String?
  isPublished Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category, isPublished])
  @@map("faqs")
}

model BlogPost {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  excerpt     String?
  content     String
  featuredImage String?
  author      String
  tags        String?
  metaTitle   String?
  metaDescription String?
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([isPublished, publishedAt])
  @@map("blog_posts")
}

model AnalyticsEvent {
  id         Int      @id @default(autoincrement())
  event      String
  properties Json
  userId     String?
  sessionId  String
  timestamp  DateTime @default(now())
  userAgent  String?
  ipAddress  String?
  referrer   String?
  pageUrl    String?

  @@index([event])
  @@index([sessionId])
  @@index([userId])
  @@index([timestamp])
  @@map("analytics_events")
}

model ABTest {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  variants    Json     // {"A": 50, "B": 50}
  startDate   DateTime @default(now())
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  assignments ABTestAssignment[]
  conversions ABTestConversion[]

  @@index([name, isActive])
  @@map("ab_tests")
}

model ABTestAssignment {
  id        Int      @id @default(autoincrement())
  testId    Int
  userId    String?
  sessionId String
  variant   String
  assignedAt DateTime @default(now())

  test ABTest @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@unique([testId, sessionId])
  @@index([testId, variant])
  @@map("ab_test_assignments")
}

model ABTestConversion {
  id           Int      @id @default(autoincrement())
  testId       Int
  sessionId    String
  variant      String
  conversionType String
  value        Decimal?
  convertedAt  DateTime @default(now())

  test ABTest @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([testId, variant])
  @@index([conversionType])
  @@map("ab_test_conversions")
}
model SearchQuery {
  id          Int      @id @default(autoincrement())
  query       String
  userId      Int?
  resultCount Int      @default(0)
  timestamp   DateTime @default(now())
  filters     Json?    // Store applied filters
  sessionId   String?

  @@index([query])
  @@index([userId])
  @@index([timestamp])
  @@map("search_queries")
}

model ProductAttribute {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  type      AttributeType
  values    Json     // Array of possible values
  isActive  Boolean  @default(true)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  @@index([name])
  @@map("product_attributes")
}

model BulkImportJob {
  id          String   @id @default(cuid())
  filename    String
  status      ImportStatus @default(PENDING)
  totalRows   Int      @default(0)
  processedRows Int    @default(0)
  successRows Int      @default(0)
  errorRows   Int      @default(0)
  errors      Json?    // Array of error details
  createdBy   String?
  createdAt   DateTime @default(now())
  completedAt DateTime?

  @@index([status])
  @@map("bulk_import_jobs")
}

enum AttributeType {
  TEXT
  NUMBER
  COLOR
  SIZE
  BOOLEAN
  SELECT
}

enum ImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model UserConsent {
  id              String   @id @default(cuid())
  userId          Int      @unique
  cookieConsent   Json
  consentVersion  String   @default("1.0")
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_consents")
}

model ConsentLog {
  id          String   @id @default(cuid())
  userId      Int
  consentType String
  granted     Boolean
  purpose     String?
  ipAddress   String
  userAgent   String
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([consentType])
  @@map("consent_logs")
}

model DataExportRequest {
  id         String   @id @default(cuid())
  userId     Int
  reason     String?
  status     String   @default("pending")
  exportData String?
  createdAt  DateTime @default(now())
  completedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@map("data_export_requests")
}

model DataDeletionRequest {
  id                String    @id @default(cuid())
  userId            Int
  reason            String
  status            String    @default("pending")
  scheduledDeletion DateTime
  createdAt         DateTime  @default(now())
  completedAt       DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([scheduledDeletion])
  @@map("data_deletion_requests")
}

model UserPrivacySettings {
  id                String   @id @default(cuid())
  userId            Int      @unique
  profileVisibility Boolean  @default(true)
  dataProcessing    Boolean  @default(true)
  marketingEmails   Boolean  @default(false)
  analyticsTracking Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_privacy_settings")
}

model DataRetentionPolicy {
  id          String   @id @default(cuid())
  dataType    String
  retentionDays Int
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([dataType])
  @@map("data_retention_policies")
}

model DataBreachLog {
  id          String   @id @default(cuid())
  type        String
  severity    String
  description String
  affectedUsers Int    @default(0)
  reportedAt  DateTime @default(now())
  resolvedAt  DateTime?
  status      String   @default("reported")
  actions     Json?

  @@index([type])
  @@index([severity])
  @@index([status])
  @@map("data_breach_logs")
}

model LegalAgreement {
  id           String   @id @default(cuid())
  userId       String
  documentType String
  version      String
  agreedAt     DateTime @default(now())
  ipAddress    String?
  userAgent    String?
  status       String   @default("ACTIVE")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([documentType])
  @@index([status])
  @@map("legal_agreements")
}

model LegalDocumentRequest {
  id           String   @id @default(cuid())
  userId       String
  documentType String
  requestType  String
  reason       String?
  status       String   @default("PENDING")
  requestedAt  DateTime @default(now())
  processedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@map("legal_document_requests")
}

model ConsentWithdrawal {
  id          String   @id @default(cuid())
  userId      String
  consentType String
  reason      String?
  withdrawnAt DateTime @default(now())
  status      String   @default("PROCESSED")
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([consentType])
  @@map("consent_withdrawals")
}

model AdminActivity {
  id         Int      @id @default(autoincrement())
  userId     Int
  action     String
  details    String   // JSON string
  entityType String?
  entityId   Int?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([entityType])
  @@index([createdAt])
  @@map("admin_activities")
}