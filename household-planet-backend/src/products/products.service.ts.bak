import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { UploadService } from '../upload/upload.service';
import { CreateProductDto } from './dto/create-product.dto';
import { UpdateProductDto } from './dto/update-product.dto';
import { BulkUpdateDto } from './dto/bulk-update.dto';
import { CreateVariantDto } from './dto/create-variant.dto';
import { SearchFiltersDto } from './dto/search-filters.dto';
import { BulkImportDto } from './dto/bulk-import.dto';
import * as csv from 'csv-parser';
import * as fs from 'fs';
import { Readable } from 'stream';

@Injectable()
export class ProductsService {
  constructor(
    private prisma: PrismaService,
    private uploadService: UploadService
  ) {}

  async create(createProductDto: CreateProductDto, files?: Express.Multer.File[]) {
    const existingProduct = await this.prisma.product.findUnique({
      where: { slug: createProductDto.slug }
    });

    if (existingProduct) {
      throw new BadRequestException('Product with this slug already exists');
    }

    let images = createProductDto.images || '[]';
    if (files && files.length > 0) {
      const uploadedImages = await this.uploadService.uploadMultiple(files, 'products');
      images = JSON.stringify(uploadedImages);
    }

    const product = await this.prisma.product.create({
      data: {
        name: createProductDto.name,
        slug: createProductDto.slug,
        description: createProductDto.description,
        shortDescription: createProductDto.shortDescription,
        sku: createProductDto.sku,
        price: parseFloat(createProductDto.price.toString()),
        comparePrice: createProductDto.comparePrice ? parseFloat(createProductDto.comparePrice.toString()) : null,
        weight: createProductDto.weight ? parseFloat(createProductDto.weight.toString()) : null,
        dimensions: createProductDto.dimensions,
        images,
        imageAltTexts: createProductDto.imageAltTexts,
        category: { connect: { id: createProductDto.categoryId } },
        brand: createProductDto.brandId ? { connect: { id: createProductDto.brandId } } : undefined,
        isActive: createProductDto.isActive ?? true,
        isFeatured: createProductDto.isFeatured ?? false,
        seoTitle: createProductDto.seoTitle,
        seoDescription: createProductDto.seoDescription,
        tags: createProductDto.tags || '',
        searchVector: createProductDto.searchVector
      },
      include: {
        category: true,
        brand: true,
        variants: true
      }
    });

    return product;
  }

  async bulkCreate(products: CreateProductDto[]) {
    const results = [];
    for (const productDto of products) {
      try {
        const product = await this.create(productDto);
        results.push({ success: true, product });
      } catch (error) {
        results.push({ success: false, error: error.message, sku: productDto.sku });
      }
    }
    return results;
  }

  async bulkUpdate(bulkUpdateDto: BulkUpdateDto) {
    const { productIds, updates } = bulkUpdateDto;
    
    return this.prisma.product.updateMany({
      where: { id: { in: productIds } },
      data: updates
    });
  }

  async findAll(filters: {
    page: number;
    limit: number;
    category?: string;
    search?: string;
    featured?: boolean;
    active?: boolean;
    sortBy?: string;
    sortOrder?: 'asc' | 'desc';
  }) {
    const { page, limit, category, search, featured, active, sortBy, sortOrder } = filters;
    const skip = (page - 1) * limit;

    const where: any = {};
    
    if (active !== undefined) where.isActive = active;
    if (featured !== undefined) where.isFeatured = featured;
    if (category) where.category = { slug: category };
    if (search) {
      where.OR = [
        { name: { contains: search } },
        { description: { contains: search } },
        { tags: { contains: search } },
        { sku: { contains: search } }
      ];
    }

    const [products, total] = await Promise.all([
      this.prisma.product.findMany({
        where,
        include: {
          category: true,
          brand: true,
          variants: true,
          _count: { select: { reviews: true } }
        },
        orderBy: { [sortBy]: sortOrder },
        skip,
        take: limit
      }),
      this.prisma.product.count({ where })
    ]);

    return {
      products,
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit)
      }
    };
  }

  async getFeatured(limit: number) {
    return this.prisma.product.findMany({
      where: { isFeatured: true, isActive: true },
      include: {
        category: true,
        brand: true,
        _count: { select: { reviews: true } }
      },
      take: limit,
      orderBy: { createdAt: 'desc' }
    });
  }

  async search(query: string, limit: number) {
    // Log search query for analytics
    await this.prisma.searchQuery.create({
      data: { query, resultCount: 0 }
    });

    const products = await this.prisma.product.findMany({
      where: {
        isActive: true,
        OR: [
          { name: { contains: query } },
          { description: { contains: query } },
          { tags: { contains: query } },
          { sku: { contains: query } }
        ]
      },
      include: {
        category: true,
        brand: true,
        variants: true,
        _count: { select: { reviews: true } }
      },
      take: limit,
      orderBy: { totalSales: 'desc' }
    });

    // Update result count
    await this.prisma.searchQuery.updateMany({
      where: { query },
      data: { resultCount: products.length }
    });

    return products;
  }

  async advancedSearch(filters: SearchFiltersDto) {
    const {
      query,
      categoryIds,
      brandIds,
      minPrice,
      maxPrice,
      rating,
      inStock,
      attributes,
      sortBy,
      sortOrder,
      page,
      limit
    } = filters;

    const skip = (page - 1) * limit;
    const where: any = { isActive: true };

    if (query) {
      where.OR = [
        { name: { contains: query } },
        { description: { contains: query } },
        { tags: { contains: query } }
      ];
    }

    if (categoryIds?.length) {
      where.categoryId = { in: categoryIds };
    }

    if (brandIds?.length) {
      where.brandId = { in: brandIds };
    }

    if (minPrice || maxPrice) {
      where.price = {};
      if (minPrice) where.price.gte = minPrice;
      if (maxPrice) where.price.lte = maxPrice;
    }

    if (rating) {
      where.averageRating = { gte: rating };
    }

    if (inStock) {
      where.variants = {
        some: { stock: { gt: 0 } }
      };
    }

    const [products, total] = await Promise.all([
      this.prisma.product.findMany({
        where,
        include: {
          category: true,
          brand: true,
          variants: true,
          _count: { select: { reviews: true } }
        },
        orderBy: { [sortBy]: sortOrder },
        skip,
        take: limit
      }),
      this.prisma.product.count({ where })
    ]);

    return {
      products,
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit)
      }
    };
  }

  async getAutocomplete(query: string, limit = 10) {
    const products = await this.prisma.product.findMany({
      where: {
        isActive: true,
        name: { contains: query }
      },
      select: {
        id: true,
        name: true,
        slug: true,
        images: true,
        price: true
      },
      take: limit,
      orderBy: { totalSales: 'desc' }
    });

    return products.map(product => ({
      ...product,
      images: JSON.parse(product.images)
    }));
  }

  async findOne(id: number, userId?: number, sessionId?: string) {
    const product = await this.prisma.product.findUnique({
      where: { id },
      include: {
        category: true,
        brand: true,
        variants: {
          where: { isActive: true },
          orderBy: { sortOrder: 'asc' }
        },
        reviews: {
          include: { user: { select: { name: true } } },
          orderBy: { createdAt: 'desc' },
          take: 10
        },
        _count: { select: { reviews: true } }
      }
    });

    if (!product) {
      throw new NotFoundException('Product not found');
    }

    // Track view
    if (userId || sessionId) {
      await this.addToRecentlyViewed(id, userId, sessionId);
    }

    // Generate recommendations if none exist
    const hasRecommendations = await this.prisma.productRecommendation.count({
      where: { productId: id }
    });

    if (hasRecommendations === 0) {
      await this.generateRecommendations(id);
    }

    return product;
  }

  async findBySlug(slug: string, userId?: number, sessionId?: string) {
    const product = await this.prisma.product.findUnique({
      where: { slug },
      include: {
        category: true,
        brand: true,
        variants: {
          where: { isActive: true },
          orderBy: { sortOrder: 'asc' }
        },
        reviews: {
          include: { user: { select: { name: true } } },
          orderBy: { createdAt: 'desc' },
          take: 10
        },
        _count: { select: { reviews: true } }
      }
    });

    if (!product) {
      throw new NotFoundException('Product not found');
    }

    // Track view
    if (userId || sessionId) {
      await this.addToRecentlyViewed(product.id, userId, sessionId);
    }

    return product;
  }

  async update(id: number, updateProductDto: UpdateProductDto, files?: Express.Multer.File[]) {
    const product = await this.prisma.product.findUnique({ where: { id } });
    
    if (!product) {
      throw new NotFoundException('Product not found');
    }

    if (updateProductDto.slug && updateProductDto.slug !== product.slug) {
      const existingProduct = await this.prisma.product.findUnique({
        where: { slug: updateProductDto.slug }
      });
      
      if (existingProduct) {
        throw new BadRequestException('Product with this slug already exists');
      }
    }

    let images = updateProductDto.images;
    if (files && files.length > 0) {
      const uploadedImages = await this.uploadService.uploadMultiple(files, 'products');
      images = JSON.stringify(uploadedImages);
    }

    const updateData: any = { ...updateProductDto };
    if (images) updateData.images = images;
    if (updateProductDto.price) updateData.price = parseFloat(updateProductDto.price.toString());
    if (updateProductDto.comparePrice) updateData.comparePrice = parseFloat(updateProductDto.comparePrice.toString());
    if (updateProductDto.weight) updateData.weight = parseFloat(updateProductDto.weight.toString());

    return this.prisma.product.update({
      where: { id },
      data: updateData,
      include: {
        category: true,
        brand: true,
        variants: true
      }
    });
  }

  async remove(id: number) {
    const product = await this.prisma.product.findUnique({ where: { id } });

    if (!product) {
      throw new NotFoundException('Product not found');
    }

    return this.prisma.product.delete({ where: { id } });
  }

  // Variant Management
  async createVariant(productId: number, createVariantDto: CreateVariantDto) {
    const product = await this.prisma.product.findUnique({ where: { id: productId } });
    if (!product) {
      throw new NotFoundException('Product not found');
    }

    const variant = await this.prisma.productVariant.create({
      data: {
        ...createVariantDto,
        productId,
        price: parseFloat(createVariantDto.price.toString())
      }
    });

    // Update product hasVariants flag
    await this.prisma.product.update({
      where: { id: productId },
      data: { hasVariants: true }
    });

    return variant;
  }

  async updateVariant(variantId: number, updateData: Partial<CreateVariantDto>) {
    return this.prisma.productVariant.update({
      where: { id: variantId },
      data: updateData
    });
  }

  async deleteVariant(variantId: number) {
    const variant = await this.prisma.productVariant.findUnique({
      where: { id: variantId },
      include: { product: true }
    });

    if (!variant) {
      throw new NotFoundException('Variant not found');
    }

    await this.prisma.productVariant.delete({ where: { id: variantId } });

    // Check if product still has variants
    const remainingVariants = await this.prisma.productVariant.count({
      where: { productId: variant.productId }
    });

    if (remainingVariants === 0) {
      await this.prisma.product.update({
        where: { id: variant.productId },
        data: { hasVariants: false }
      });
    }
  }

  // Recommendations
  async getRecommendations(productId: number, type: 'RELATED' | 'SIMILAR' | 'FREQUENTLY_BOUGHT_TOGETHER' = 'RELATED', limit = 6) {
    const recommendations = await this.prisma.productRecommendation.findMany({
      where: { productId, type },
      include: {
        recommendedProduct: {
          include: {
            category: true,
            brand: true,
            _count: { select: { reviews: true } }
          }
        }
      },
      orderBy: { score: 'desc' },
      take: limit
    });

    return recommendations.map(rec => rec.recommendedProduct);
  }

  async generateRecommendations(productId: number) {
    const product = await this.prisma.product.findUnique({
      where: { id: productId },
      include: { category: true }
    });

    if (!product) return;

    // Related products (same category)
    const relatedProducts = await this.prisma.product.findMany({
      where: {
        categoryId: product.categoryId,
        id: { not: productId },
        isActive: true
      },
      take: 10,
      orderBy: { totalSales: 'desc' }
    });

    // Create recommendations
    for (const related of relatedProducts) {
      await this.prisma.productRecommendation.upsert({
        where: {
          productId_recommendedProductId_type: {
            productId,
            recommendedProductId: related.id,
            type: 'RELATED'
          }
        },
        create: {
          productId,
          recommendedProductId: related.id,
          type: 'RELATED',
          score: Math.random() * 0.5 + 0.5
        },
        update: {}
      });
    }
  }

  // Recently Viewed
  async addToRecentlyViewed(productId: number, userId?: number, sessionId?: string) {
    if (!userId && !sessionId) return;

    // Increment view count
    await this.prisma.product.update({
      where: { id: productId },
      data: { viewCount: { increment: 1 } }
    });

    const data: any = { productId };
    if (userId) data.userId = userId;
    if (sessionId) data.sessionId = sessionId;

    await this.prisma.recentlyViewed.upsert({
      where: userId 
        ? { userId_productId: { userId, productId } }
        : { sessionId_productId: { sessionId, productId } },
      create: data,
      update: { viewedAt: new Date() }
    });

    // Keep only last 20 items
    const recentItems = await this.prisma.recentlyViewed.findMany({
      where: userId ? { userId } : { sessionId },
      orderBy: { viewedAt: 'desc' },
      skip: 20
    });

    if (recentItems.length > 0) {
      await this.prisma.recentlyViewed.deleteMany({
        where: { id: { in: recentItems.map(item => item.id) } }
      });
    }
  }

  async getRecentlyViewed(userId?: number, sessionId?: string, limit = 10) {
    if (!userId && !sessionId) return [];

    return this.prisma.recentlyViewed.findMany({
      where: userId ? { userId } : { sessionId },
      include: {
        product: {
          include: {
            category: true,
            brand: true,
            _count: { select: { reviews: true } }
          }
        }
      },
      orderBy: { viewedAt: 'desc' },
      take: limit
    });
  }

  // Low Stock Alerts
  async getLowStockProducts(threshold = 5) {
    return this.prisma.productVariant.findMany({
      where: {
        stock: { lte: threshold },
        isActive: true
      },
      include: {
        product: {
          include: {
            category: true,
            brand: true
          }
        }
      },
      orderBy: { stock: 'asc' }
    });
  }

  async createLowStockAlert(variantId: number, threshold: number) {
    return this.prisma.lowStockAlert.upsert({
      where: { variantId },
      create: { variantId, threshold },
      update: { threshold, isActive: true }
    });
  }

  // Bulk Import/Export
  async bulkImportFromCSV(file: Express.Multer.File, userId?: string) {
    const jobId = `import_${Date.now()}`;
    
    const job = await this.prisma.bulkImportJob.create({
      data: {
        id: jobId,
        filename: file.originalname,
        createdBy: userId
      }
    });

    // Process CSV in background
    this.processBulkImport(file.buffer, jobId);
    
    return { jobId, message: 'Import started' };
  }

  private async processBulkImport(buffer: Buffer, jobId: string) {
    const results = [];
    const errors = [];
    let totalRows = 0;
    let processedRows = 0;
    let successRows = 0;

    try {
      await this.prisma.bulkImportJob.update({
        where: { id: jobId },
        data: { status: 'PROCESSING' }
      });

      const stream = Readable.from(buffer.toString());
      
      await new Promise((resolve, reject) => {
        stream
          .pipe(csv())
          .on('data', async (row) => {
            totalRows++;
            try {
              const productData = {
                name: row.name,
                slug: row.slug || row.name.toLowerCase().replace(/\s+/g, '-'),
                description: row.description,
                sku: row.sku,
                price: parseFloat(row.price),
                categoryId: parseInt(row.categoryId),
                brandId: row.brandId ? parseInt(row.brandId) : null,
                tags: row.tags || '',
                images: row.images || '[]'
              };

              await this.create(productData as CreateProductDto);
              successRows++;
            } catch (error) {
              errors.push({ row: totalRows, error: error.message, data: row });
            }
            processedRows++;
          })
          .on('end', resolve)
          .on('error', reject);
      });

      await this.prisma.bulkImportJob.update({
        where: { id: jobId },
        data: {
          status: 'COMPLETED',
          totalRows,
          processedRows,
          successRows,
          errorRows: errors.length,
          errors: JSON.stringify(errors),
          completedAt: new Date()
        }
      });
    } catch (error) {
      await this.prisma.bulkImportJob.update({
        where: { id: jobId },
        data: {
          status: 'FAILED',
          errors: JSON.stringify([{ error: error.message }]),
          completedAt: new Date()
        }
      });
    }
  }

  async exportToCSV() {
    const products = await this.prisma.product.findMany({
      include: {
        category: true,
        brand: true,
        variants: true
      }
    });

    const csvData = products.map(product => ({
      id: product.id,
      name: product.name,
      slug: product.slug,
      sku: product.sku,
      price: product.price,
      description: product.description,
      category: product.category.name,
      brand: product.brand?.name || '',
      isActive: product.isActive,
      isFeatured: product.isFeatured,
      tags: product.tags,
      variants: product.variants.length,
      createdAt: product.createdAt
    }));

    return csvData;
  }

  async getImportJobStatus(jobId: string) {
    return this.prisma.bulkImportJob.findUnique({
      where: { id: jobId }
    });
  }
}