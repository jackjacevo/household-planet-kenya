import { Injectable, UnauthorizedException, BadRequestException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import * as bcrypt from 'bcryptjs';
import * as crypto from 'crypto';
import { UsersService } from '../users/users.service';
import { EncryptionService } from '../common/services/encryption.service';

@Injectable()
export class AuthService {
  private readonly maxLoginAttempts = 5;
  private readonly lockoutDuration = 15 * 60 * 1000; // 15 minutes
  private loginAttempts = new Map<string, { count: number; lastAttempt: number }>();

  constructor(
    private usersService: UsersService,
    private jwtService: JwtService,
    private encryptionService: EncryptionService,
  ) {}

  async validateUser(email: string, password: string, ip?: string): Promise<any> {
    // Check for account lockout
    if (ip && this.isAccountLocked(ip)) {
      throw new UnauthorizedException('Account temporarily locked due to too many failed attempts');
    }

    const user = await this.usersService.findByEmail(email);
    if (user && await bcrypt.compare(password, user.password)) {
      // Reset login attempts on successful login
      if (ip) {
        this.loginAttempts.delete(ip);
      }
      const { password, ...result } = user;
      return result;
    }

    // Track failed login attempts
    if (ip) {
      this.trackFailedLogin(ip);
    }
    return null;
  }

  private isAccountLocked(ip: string): boolean {
    const attempts = this.loginAttempts.get(ip);
    if (!attempts) return false;

    const now = Date.now();
    if (now - attempts.lastAttempt > this.lockoutDuration) {
      this.loginAttempts.delete(ip);
      return false;
    }

    return attempts.count >= this.maxLoginAttempts;
  }

  private trackFailedLogin(ip: string): void {
    const now = Date.now();
    const attempts = this.loginAttempts.get(ip) || { count: 0, lastAttempt: 0 };

    if (now - attempts.lastAttempt > this.lockoutDuration) {
      attempts.count = 1;
    } else {
      attempts.count++;
    }

    attempts.lastAttempt = now;
    this.loginAttempts.set(ip, attempts);
  }

  async login(user: any) {
    const payload = { email: user.email, sub: user.id, role: user.role };
    return {
      access_token: this.jwtService.sign(payload),
      user,
    };
  }

  async register(createUserDto: any) {
    const existingUser = await this.usersService.findByEmail(createUserDto.email);
    if (existingUser) {
      throw new BadRequestException('User already exists');
    }

    const hashedPassword = await bcrypt.hash(createUserDto.password, 12);
    const verificationToken = crypto.randomBytes(32).toString('hex');
    
    const user = await this.usersService.create({
      ...createUserDto,
      password: hashedPassword,
      verificationToken,
    });
    
    // TODO: Send verification email
    const { password, ...result } = user;
    return { message: 'Registration successful. Please verify your email.', user: result };
  }

  async requestPasswordReset(email: string) {
    const user = await this.usersService.findByEmail(email);
    if (!user) {
      throw new BadRequestException('User not found');
    }

    const resetToken = crypto.randomBytes(32).toString('hex');
    const resetTokenExpiry = new Date(Date.now() + 3600000); // 1 hour

    await this.usersService.updateResetToken(user.id, resetToken, resetTokenExpiry);
    
    // TODO: Send password reset email
    return { message: 'Password reset email sent' };
  }

  async resetPassword(token: string, newPassword: string) {
    const user = await this.usersService.findByResetToken(token);
    if (!user || user.resetTokenExpiry < new Date()) {
      throw new BadRequestException('Invalid or expired reset token');
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    await this.usersService.resetPassword(user.id, hashedPassword);
    
    return { message: 'Password reset successful' };
  }

  async verifyEmail(token: string) {
    const user = await this.usersService.findByVerificationToken(token);
    if (!user) {
      throw new BadRequestException('Invalid verification token');
    }

    await this.usersService.verifyEmail(user.id);
    return { message: 'Email verified successfully' };
  }

  async logout() {
    // JWT is stateless, so logout is handled client-side
    return { message: 'Logged out successfully' };
  }
}