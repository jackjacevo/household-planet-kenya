# Multi-stage build for production backend
FROM node:18-alpine AS builder

WORKDIR /app

# Install system dependencies for Prisma
RUN apk add --no-cache openssl openssl-dev

# Copy package files and prisma schema first for better caching
COPY package*.json ./
COPY prisma ./prisma/

# Install dependencies and generate Prisma client
RUN npm ci --only=production && npm cache clean --force
RUN npx prisma generate

# Copy source code and build
COPY . .
RUN npm run build

# Production stage
FROM node:18-alpine AS production

WORKDIR /app

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init openssl

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nestjs -u 1001

# Copy built application from builder stage
COPY --from=builder --chown=nestjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nestjs:nodejs /app/package*.json ./
COPY --from=builder --chown=nestjs:nodejs /app/prisma ./prisma

# Create uploads directory with proper permissions
RUN mkdir -p uploads && chown nestjs:nodejs uploads

# Create health check script
RUN echo 'const http = require("http");\n\
const options = {\n\
  host: "localhost",\n\
  port: 3001,\n\
  path: "/health",\n\
  timeout: 3000,\n\
};\n\
const request = http.request(options, (res) => {\n\
  console.log(`Health check status: ${res.statusCode}`);\n\
  process.exit(res.statusCode === 200 ? 0 : 1);\n\
});\n\
request.on("error", (err) => {\n\
  console.error("Health check failed:", err);\n\
  process.exit(1);\n\
});\n\
request.end();' > /app/healthcheck.js && chown nestjs:nodejs /app/healthcheck.js

USER nestjs

EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node healthcheck.js

# Use dumb-init to handle signals properly
CMD ["dumb-init", "node", "dist/src/main.js"]